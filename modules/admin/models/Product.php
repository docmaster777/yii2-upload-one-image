<?php

namespace app\modules\admin\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "product".
 *
 * @property int $id
 * @property int $category_id
 * @property string $name
 * @property string $keywords
 * @property string $description
 * @property string $alias
 * @property string $content
 * @property double $price
 * @property int $hit
 * @property int $new
 * @property int $sale
 */
class Product extends \yii\db\ActiveRecord
{
//    Добавляем два свойства
    public $imageFile;
    public $gallery;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id', 'hit', 'new', 'sale'], 'integer'],
            [['content'], 'string'],
            [['price'], 'number'],
            [['name', 'keywords', 'description', 'alias'], 'string', 'max' => 255],
//            Добавляем правила для валидации
            [['imageFile'], 'file', 'extensions' => 'png, jpg, jpeg'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Category ID',
            'name' => 'Имя',
            'keywords' => 'Keywords',
            'description' => 'Description',
            'alias' => 'Alias',
            'content' => 'Content',
            'price' => 'Price',
            'hit' => 'Hit',
            'new' => 'New',
            'sale' => 'Sale',
            'imageFile' => 'Картинка',
        ];
    }

    public function getCategoryList(){
        $categories = ArrayHelper::map(Category::find()->all(), 'id', 'name');
        return $categories;
    }

//    Загрузка картинки при создании поста

    public function upload($fileimg)
    {
        $genfilename = strtolower(md5(uniqid($this->imageFile->baseName)));
        if ($this->validate()) {
            if($this->imageFile==!null){
                if (!file_exists('uploads/Products/' . 'Product' .$this->id)){

                    mkdir('uploads/Products/' . 'Product' .$this->id);
                    $pathto = 'uploads/Products/' . 'Product' .$this->id .'/'. $genfilename . '.' . $this->imageFile->extension;
                    $this->imageFile->saveAs($pathto);
                    return $pathto;
                }
            }
        }
    }

//    Загрузка картинки
    public function uploadImage($fileimg, $currentimage)
    {

        if ($this->validate()) {

            $genfilename = strtolower(md5(uniqid($this->imageFile->baseName)));

            if($currentimage->filePath){
                unlink($currentimage->filePath);
            }

            if($this->imageFile==!null){
                if (!file_exists('uploads/Products/' . 'Product' .$this->id)){

                    mkdir('uploads/Products/' . 'Product' .$this->id);
                    $pathto = 'uploads/Products/' . 'Product' .$this->id .'/'. $genfilename . '.' . $this->imageFile->extension;
                    $this->imageFile->saveAs($pathto);
                    return $pathto;
                }else {
                    $pathto = 'uploads/Products/' . 'Product' . $this->id .'/'. $genfilename . '.' . $this->imageFile->extension;
                    $this->imageFile->saveAs($pathto);
                    return $pathto;
                }
            }
        } else {
            return false;
        }
    }

//    Получение пути к картинки из таблицы картинок
    public function getImage(){
        return $this->hasOne(Image::className(), ['itemId' => 'id']);
    }

    public function beforeDelete()
    {
        $pathcurrentimag = Image::find()->andWhere(['itemId' => $this->id])->one();
        if($pathcurrentimag){
            unlink($pathcurrentimag->filePath);
            rmdir('uploads/Products/Product' . $this->id);
            $pathcurrentimag->delete();
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


}
